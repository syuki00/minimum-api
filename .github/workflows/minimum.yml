name: "Terraform Plan"

on:
  push:

env:
  GOOGLE_APPLICATION_CREDENTIALS: /gcloud_credentials.json

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest

    permissions:
      contents: read  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud authentication
        run: |
          echo "${{ secrets.GCLOUD_CREDENTIALS }}" > /gcloud_credentials.json
          
      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=tfplan



# env:
#   TF_CLOUD_ORGANIZATION: "MINIMUM"
#   TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
#   TF_WORKSPACE: "learn-terraform-github-actions"
#   CONFIG_DIRECTORY: "./"

# jobs:
#   terraform:
#     if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
#     name: "Terraform Plan"
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       pull-requests: write
#     steps:
#       # - name: Checkout
#       #   uses: actions/checkout@v3

#       - name: Upload Configuration
#         uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
#         id: plan-upload
#         with:
#           workspace: ${{ env.TF_WORKSPACE }}
#           directory: ${{ env.CONFIG_DIRECTORY }}
#           speculative: true

#       - name: Create Plan Run
#         uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
#         id: plan-run
#         with:
#           workspace: ${{ env.TF_WORKSPACE }}
#           configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
#           plan_only: true

#       - name: Get Plan Output
#         uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
#         id: plan-output
#         with:
#           plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });


# name: GitHub Actions Demo
# run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v4
#       - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "🍏 This job's status is ${{ job.status }}."



# # name: minimum_workflows

# # on:
# #   push:
# #     branches:
# #       - main  

# # jobs:
# #   terraform:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Actions Test
# #         # shell: bash
# #         run: echo "test"

#     # env:
#     #   # GitHub SecretsからGCPの設定情報を取得
#     #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#     #   GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

#     # steps:
#     #   # リポジトリのコードをクローン
#     #   - name: Checkout repository
#     #     uses: actions/checkout@v2

#     #   # Google Cloud SDKをセットアップ
#     #   - name: Setup Google Cloud SDK
#     #     uses: google-github-actions/setup-gcloud@v1
#     #     with:
#     #       project_id: ${{ secrets.GCP_PROJECT_ID }}
#     #       credentials_json: ${{ secrets.GCP_CREDENTIALS }}

#     #   # Terraformをセットアップ
#     #   - name: Setup Terraform
#     #     uses: hashicorp/setup-terraform@v2
#     #     with:
#     #       terraform_version: 1.6.0  # 使用するTerraformのバージョンを指定

#     #   # terraform initを実行して初期化
#     #   - name: Terraform Init
#     #     run: terraform init

#     #   # terraform planを実行して計画を確認
#     #   - name: Terraform Plan
#     #     run: terraform plan -out=tfplan

#     #   # 確認後、terraform applyを実行
#     #   - name: Terraform Apply
#     #     if: github.ref == 'refs/heads/main'  # mainブランチのみでapplyを実行
#     #     run: terraform apply -input=false tfplan
